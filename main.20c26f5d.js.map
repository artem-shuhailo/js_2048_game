{"version":3,"sources":["scripts/main.js"],"names":["gameField","score","cellsLength","WINNING_SCORE","button","document","querySelector","fieldCells","querySelectorAll","gameScore","messageStart","messageLose","messageWin","generateRandomCell","emptyCells","row","col","push","length","Math","floor","random","updateFieldCell","cellValue","cellElement","innerHTML","className","filterZero","filter","num","slide","newRow","i","classList","remove","areArraysEqual","a","b","JSON","stringify","slideLeft","moved","r","originalRow","slideRight","reverse","slideUp","column","originalColumn","slideDown","isGameOver","disableScroll","body","style","overflow","enableScroll","addEventListener","contains","add","e","code"],"mappings":"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","file":"main.20c26f5d.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nlet gameField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet score = 0;\nconst cellsLength = 4;\nconst WINNING_SCORE = 2048;\n\nconst button = document.querySelector('.button');\nconst fieldCells = document.querySelectorAll('.field-cell');\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerHTML = 'Restart';\n    messageStart.classList.add('hidden');\n\n    disableScroll();\n    generateRandomCell();\n    generateRandomCell();\n    updateFieldCell();\n  } else if (button.classList.contains('restart')) {\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n\n    gameField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    score = 0;\n\n    disableScroll();\n    generateRandomCell();\n    generateRandomCell();\n    updateFieldCell();\n  }\n});\n\nfunction generateRandomCell() {\n  const emptyCells = [];\n\n  for (let row = 0; row < cellsLength; row++) {\n    for (let col = 0; col < cellsLength; col++) {\n      if (!gameField[row][col]) {\n        emptyCells.push({\n          row, col,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const { row, col }\n      = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    gameField[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n}\n\nfunction updateFieldCell() {\n  for (let row = 0; row < cellsLength; row++) {\n    for (let col = 0; col < cellsLength; col++) {\n      const cellValue = gameField[row][col];\n      const index = row * cellsLength + col;\n      const cellElement = fieldCells[index];\n\n      if (cellValue === 0) {\n        cellElement.innerHTML = '';\n      } else {\n        cellElement.innerHTML = cellValue;\n      }\n\n      cellElement.className = `field-cell ${cellValue !== 0\n        ? `field-cell--${cellValue}`\n        : ''}`;\n    }\n  }\n\n  gameScore.innerHTML = score;\n}\n\ndocument.addEventListener('keyup', (e) => {\n  let moved = false;\n\n  switch (e.code) {\n    case 'ArrowRight':\n      moved = slideRight();\n      break;\n\n    case 'ArrowLeft':\n      moved = slideLeft();\n      break;\n\n    case 'ArrowUp':\n      moved = slideUp();\n      break;\n\n    case 'ArrowDown':\n      moved = slideDown();\n      break;\n\n    default:\n      break;\n  }\n\n  if (moved) {\n    generateRandomCell();\n    updateFieldCell();\n\n    if (isGameOver()) {\n      messageLose.classList.remove('hidden');\n      enableScroll();\n    }\n  }\n});\n\nfunction filterZero(row) {\n  return row.filter((num) => num !== 0);\n}\n\nfunction slide(row) {\n  let newRow = row;\n\n  newRow = filterZero(newRow);\n\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n\n    if (newRow[i] === WINNING_SCORE) {\n      messageWin.classList.remove('hidden');\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < cellsLength) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction areArraysEqual(a, b) {\n  return JSON.stringify(a) === JSON.stringify(b);\n}\n\nfunction slideLeft() {\n  let moved = false;\n\n  for (let r = 0; r < cellsLength; r++) {\n    let row = gameField[r];\n    const originalRow = [...row];\n\n    row = slide(row);\n    gameField[r] = row;\n\n    if (!moved && !areArraysEqual(originalRow, row)) {\n      moved = true;\n    }\n  }\n\n  return moved;\n}\n\nfunction slideRight() {\n  let moved = false;\n\n  for (let r = 0; r < cellsLength; r++) {\n    let row = gameField[r];\n\n    const originalRow = [...row];\n\n    row.reverse();\n    row = slide(row);\n\n    row.reverse();\n\n    gameField[r] = row;\n\n    if (!moved && !areArraysEqual(originalRow, row)) {\n      moved = true;\n    }\n  }\n\n  return moved;\n}\n\nfunction slideUp() {\n  let moved = false;\n\n  for (let col = 0; col < cellsLength; col++) {\n    let column = [\n      gameField[0][col],\n      gameField[1][col],\n      gameField[2][col],\n      gameField[3][col],\n    ];\n\n    const originalColumn = [...column];\n\n    column = slide(column);\n\n    for (let row = 0; row < cellsLength; row++) {\n      gameField[row][col] = column[row];\n    }\n\n    if (!moved && !areArraysEqual(originalColumn, column)) {\n      moved = true;\n    }\n  }\n\n  return moved;\n}\n\nfunction slideDown() {\n  let moved = false;\n\n  for (let col = 0; col < cellsLength; col++) {\n    let column = [\n      gameField[0][col],\n      gameField[1][col],\n      gameField[2][col],\n      gameField[3][col],\n    ];\n\n    const originalColumn = [...column];\n\n    column.reverse();\n    column = slide(column);\n    column.reverse();\n\n    for (let row = 0; row < cellsLength; row++) {\n      gameField[row][col] = column[row];\n    }\n\n    if (!moved && !areArraysEqual(originalColumn, column)) {\n      moved = true;\n    }\n  }\n\n  return moved;\n}\n\nfunction isGameOver() {\n  for (let row = 0; row < cellsLength; row++) {\n    for (let col = 0; col < cellsLength; col++) {\n      if (gameField[row][col] === 0) {\n        return false;\n      }\n\n      if (\n        (col < cellsLength - 1 && gameField[row][col]\n          === gameField[row][col + 1])\n        || (row < cellsLength - 1 && gameField[row][col]\n          === gameField[row + 1][col])\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction disableScroll() {\n  document.body.style.overflow = 'hidden';\n}\n\nfunction enableScroll() {\n  document.body.style.overflow = 'auto';\n}\n"]}